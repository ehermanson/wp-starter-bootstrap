// Media Query Mixins
// ------------------

@mixin bp($point) {
  @if $point == xs-only {
    @media (max-width: 40em) { @content } /* max-width 640px, mobile-only styles, use when QAing mobile issues */
  }
  @else if $point == sm {
    @media (min-width: 40.063em) { @content } /* min-width 641px, medium screens */
  }
  @else if $point == sm-only {
    @media (max-width: 50em) { @content } /* max-width 1025px, medium screens */
  }
  @else if $point == md {
    @media (min-width: 50em) { @content } /* min-width 1025px, large screens */
  }
  @else if $point == lg {
    @media (min-width: 64.063em) { @content } /* min-width 1025px, large screens */
  }
}

// Responsive Grid
// @include makeGrid(4, 2%)
// ------------------------

@mixin makeGrid($columns, $margin) {
  width: ((100% - (($columns - 1) * $margin)) / $columns);
  &:nth-child(n) {
    margin-bottom: $margin;
    margin-right: $margin;
  }
  &:nth-child(#{$columns}n) {
    margin-right: 0;
    margin-bottom: 0;
  }
}


// FontSize REM Calc
// ------------------

@function calculateRem($size) {
  $remSize: $size / 16px;
  @return #{$remSize}rem;
}

@mixin fontSize($size) {
  font-size: $size; //Fallback in px
  font-size: calculateRem($size);
}

// Center Item Horizontally and Vertically

@mixin centerer {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

/*
 * Mixin for basic CSS triangles
 * @include triangle(up, #000, 50px)
*/
@mixin triangle($direction:up, $color:#000, $size:100px) {
  @if($direction == up) {
    border-color: transparent transparent $color;
    border-style: solid;
    border-width: 0 $size $size;
    height: 0;
    width: 0;
  }
  @if($direction == down) {
    border-color: $color transparent transparent transparent;
    border-style: solid;
    border-width: $size;
    height: 0;
    width: 0;
  }
  @if($direction == left) {
    border-color: transparent $color transparent transparent;
    border-style: solid;
    border-width: $size $size $size 0;
    height: 0;
    width: 0;
  }
  @if($direction == right) {
    border-color: transparent transparent transparent $color;
    border-style: solid;
    border-width: $size 0 $size $size;
    height: 0;
    width: 0;
  }
}

/*
 * @font-face mixin
 * Bulletproof font-face via Font Squirrel
 * @include fontface('family', 'assets/fonts/', 'myfontname');
 */

@mixin fontface($font-family, $font-url, $font-name) {
  @font-face {
    font: {
      family: $font-family;
      style: normal;
      weight: normal;
    }
    src: url($font-url + '/' + $font-name + '.eot');
    src: url($font-url + '/' + $font-name + '.eot#iefix') format('embedded-opentype'),
       url($font-url + '/' + $font-name + '.woff') format('woff'),
       url($font-url + '/' + $font-name + '.ttf')  format('truetype'),
       url($font-url + '/' + $font-name + '.svg#' + $font-name) format('svg');
  }
}

@mixin clearfix {
  &:before, &:after { content: ""; display: table; }
  &:after { clear: both; }
  *zoom: 1;
}